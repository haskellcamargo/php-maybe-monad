{"name":"PHP Maybe Monad","tagline":"Maybe monad in PHP","body":"[![Build Status](https://travis-ci.org/haskellcamargo/php-maybe-monad.svg?branch=master)](https://travis-ci.org/haskellcamargo/php-maybe-monad) [![Latest Stable Version](https://poser.pugx.org/haskellcamargo/php-maybe-monad/v/stable)](https://packagist.org/packages/haskellcamargo/php-maybe-monad) [![Total Downloads](https://poser.pugx.org/haskellcamargo/php-maybe-monad/downloads)](https://packagist.org/packages/haskellcamargo/php-maybe-monad) [![Latest Unstable Version](https://poser.pugx.org/haskellcamargo/php-maybe-monad/v/unstable)](https://packagist.org/packages/haskellcamargo/php-maybe-monad) [![License](https://poser.pugx.org/haskellcamargo/php-maybe-monad/license)](https://packagist.org/packages/haskellcamargo/php-maybe-monad)\r\n\r\nTo deal with computations that may fail.\r\nA port of Haskell's `Data.Maybe` module for **PHP > 5.4**.\r\n\r\n### Installation\r\n\r\n`composer install php-maybe-monad`\r\n\r\n### Example\r\n\r\n```php\r\n<?php\r\n\r\nrequire_once \"vendor/autoload.php\";\r\n\r\nuse HaskellCamargo\\Maybe;\r\n\r\nMaybe\\Maybe(@$_GET[\"username\"])->bind(function($user)) {\r\n  echo \"Welcome, $user. You're logged in!\";\r\n});\r\n\r\n$userAge = Maybe\\Maybe(null)->fromMaybe(0); // => 0\r\n$userAge = Maybe\\Maybe(19)->fromMaybe(0); // => 19\r\n```\r\n\r\n### Documentation\r\n\r\nA `Maybe` type encapsulates an optional value. A value of type `Maybe a`\r\neither contains a value of type a (represented as `Just a`), or it is empty\r\n(represented as `Nothing`). Using `Maybe` is a good way to deal with errors\r\nor exceptional cases without resorting to drastic measures such as\r\n`Exception`.\r\nThe `Maybe` type is also a monad. It is a simple kind of error monad, where\r\nall errors are represented by `Nothing`. A richer error monad can be built\r\nusing the `Either` type.\r\n\r\n#### bind :: (Maybe a, callable) -> Maybe b\r\n\r\nEquivalent to Haskell's `>>=` operator. Its first argument is a value in\r\na monadic type, its second argument is a function that maps from the\r\nunderlying type of the first argument to another monadic type, and its\r\nresults is in that other monadic type.\r\n\r\n```php\r\n$age = Maybe\\Maybe(null)->bind(function($x) {\r\n  return 10;\r\n}); // => Nothing\r\n\r\n$age = Maybe\\Maybe(10)\r\n->bind(function($x) {\r\n  return $x + 10; // => Just(20);\r\n})\r\n->bind(function($x) {\r\n  return $x + 20; // => Just(40);\r\n})->fromJust(); // => 40\r\n```\r\n\r\n#### fromJust :: Maybe a -> a\r\n\r\nExtracts the element out of a `Just` and returns an error if its argument\r\nis `Nothing`.\r\n\r\n```php\r\nMaybe\\Maybe(\"Foo\")->fromJust(); // => \"Foo\"\r\nMaybe\\Maybe(null)->fromJust(); // => Exception: Cannot cal fromJust() on Nothing\r\n```\r\n\r\n#### fromMaybe :: (Maybe a, a) -> a\r\n\r\nTakes a `Maybe` value and a default value. If the `Maybe` is `Nothing`, it\r\nreturns the default values; otherwise, it returns the value contained in\r\nthe `Maybe`.\r\n\r\n```php\r\nMaybe\\Maybe(10)->fromMaybe(5); // => 10\r\nMaybe\\Maybe(null)->fromMaybe(5); // => 5\r\n```\r\n\r\n#### isJust :: Maybe a -> boolean\r\n\r\nReturns true if its argument is of the form `Just _`.\r\n\r\n```php\r\nMaybe\\Maybe(10)->isJust(); // => true\r\nMaybe\\Maybe(null)->isJust(); // => false\r\n```\r\n\r\n#### isNothing :: Maybe a -> boolean\r\n\r\nReturns true if its argument is of the form `Nothing`.\r\n\r\n```php\r\nMaybe\\Maybe(10)->isNothing(); // => false\r\nMaybe\\Maybe(null)->isNothing(); // => true\r\n```\r\n\r\n#### maybe :: (Maybe a, b, callable) -> b\r\n\r\nTakes a default value, a function and, of course, a `Maybe` value. If the\r\n`Maybe` value is `Nothing`, the function returns the default value.\r\nOtherwise, it applies the function to the value inside the `Just` and\r\nreturns the result.\r\n\r\n```php\r\n$just = Maybe\\Maybe(10);\r\n$nothing = Maybe\\Maybe(null);\r\n\r\n$just->maybe(40, function($num) {\r\n        return $num + 15;\r\n}); // => 25\r\n\r\n$nothing->maybe(40, function($num) {\r\n  return $num + 15;\r\n}); // => 40\r\n```\r\n\r\n#### toList :: Maybe a -> array\r\n\r\nReturns an empty list when given ``Nothing`` or a singleton list when not\r\ngiven ``Nothing``.\r\n\r\n```php\r\nMaybe\\Maybe(10)->toList(); // => [10]\r\nMaybe\\Maybe(null)->toList(); // => []\r\n```\r\n\r\nMade with :heart: by Marcelo Camargo and Reinaldo Rauch\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}